{"version":3,"sources":["Assets/Capture_square.jpg","Components/IntroText.js","Components/CardView.js","Components/Navbar.js","Components/Projects.js","Components/App.js","reportWebVitals.js","index.js"],"names":["IntroText","props","newRef","useRef","useEffect","Typed","current","strings","typeSpeed","contentType","fadeOutClass","fadeOutDelay","onDestroy","console","log","onComplete","document","querySelector","remove","setTimeout","setIntro","sessionStorage","setItem","className","ref","CardView","introMode","setIntroMode","darkMode","src","image","alt","Navbar","href","onClick","modeHandler","Projects","App","useState","setDarkMode","getItem","prev","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uTAAe,G,YAAA,IAA0B,4C,gCCgC1BA,MA5Bf,SAAmBC,GACf,IAAIC,EAASC,mBAmBb,OAlBAC,qBAAU,WACE,IAAIC,IAAMH,EAAOI,QAAS,CAClCC,QAAS,CAAC,YAAa,qCAAsC,6BAC7DC,UAAW,GACXC,YAAa,OAEbC,aAAc,iBACdC,aAAc,IACdC,UAAW,WACTC,QAAQC,IAAI,oBAEdC,WAAY,WACVC,SAASC,cAAc,iBAAiBC,SACxCC,YAAW,WAAMlB,EAAMmB,UAAS,GAAQC,eAAeC,QAAQ,QAAQ,KAAO,UAGlF,IAGE,qBAAKC,UAAU,0BAAf,SACI,sBAAMA,UAAU,gBAAgBC,IAAMtB,OCcnCuB,MAnCf,SAAkBxB,GAEhB,OACE,qCACEA,EAAMyB,WAAc,cAAC,EAAD,CAAWN,SAAYnB,EAAM0B,gBAChD1B,EAAMyB,WAAc,qBAAKH,UAAS,eAAUtB,EAAM2B,SAAW,gBAAkB,iBAA3D,SACrB,sBAAKL,UAAU,eAAf,UACE,sBAAKA,UAAU,aAAf,UACE,qBAAKA,UAAU,uBAAf,SACA,qBAAKM,IAAKC,EAAOC,IAAI,GAAGR,UAAU,eAElC,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,kBAAd,8BACA,oBAAIA,UAAU,iBAAd,iCACA,sBAAKA,UAAU,eAAf,UACA,mBAAGA,UAAU,oBACb,mBAAGA,UAAU,yBACb,mBAAGA,UAAU,oCAIjB,qBAAKA,UAAU,eAAf,SACE,4N,MCNKS,MAnBf,SAAgB/B,GAEZ,OACI,qBAAKsB,UAAU,SAAf,SACA,gCACItB,EAAMyB,WAAa,+BAAI,mBAAGO,KAAK,QAAR,kBAAJ,QACnBhC,EAAMyB,WAAa,+BAAI,mBAAGO,KAAK,YAAR,sBAAJ,OACrB,oBAAIC,QAASjC,EAAMkC,YAAnB,SACGlC,EAAM2B,SACL,sBAAML,UAAU,iBAAhB,wBAEA,sBAAMA,UAAU,kBAAhB,+B,MCFCa,MATf,WAEI,OACI,qBAAKb,UAAU,yBAAf,SACI,sD,OC4BGc,MA3Bf,WACE,MAAgCC,oBAAS,GAAzC,mBAAOV,EAAP,KAAiBW,EAAjB,KACA,EAAkCD,oBAAUjB,eAAemB,QAAQ,SAAnE,mBAAOd,EAAP,KAAkBC,EAAlB,KAQA,OANAd,QAAQC,IAAIO,eAAemB,QAAQ,SAOjC,sBAAKjB,UAAS,cAASK,EAAW,eAAiB,gBAAnD,UACE,cAAC,EAAD,CAAQA,SAAUA,EAAUO,YAPZ,WAClBI,GAAY,SAACE,GAAD,OAAWA,MAMiCf,UAAaA,IAEnE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,YAAlB,SACE,cAAC,EAAD,CAAUhB,aAAgBA,MAE5B,cAAC,IAAD,CAAOgB,KAAK,IAAZ,SACE,cAAC,EAAD,CAAUf,SAAUA,EAAUF,UAAYA,EAAWC,aAAgBA,aCdhEiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJvC,SAASwC,eAAe,SAM1BZ,M","file":"static/js/main.c28c70c3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Capture_square.14be075f.jpg\";","import { useEffect, useRef } from \"react\";\r\nimport Typed from \"typed.js\";\r\nimport './IntroText.css';\r\n\r\nfunction IntroText(props) {\r\n    let newRef = useRef();\r\n    useEffect(()=>{\r\n    var typed = new Typed(newRef.current, {\r\n        strings: [\"Namaste!!\", \"My Name is <b>Arobind Maharana</b>\", \"I am a Frontend Developer\"],\r\n        typeSpeed: 60,\r\n        contentType: 'html',\r\n        // fadeOut: true,\r\n        fadeOutClass: 'typed-fade-out',\r\n        fadeOutDelay: 500,\r\n        onDestroy: ()=>{\r\n          console.log(\"Finished Typing\")\r\n        },\r\n        onComplete: ()=>{ \r\n          document.querySelector(\".typed-cursor\").remove();\r\n          setTimeout(()=>{ props.setIntro(false); sessionStorage.setItem('flag', true)},1000) }\r\n        \r\n      });\r\n    },[]);\r\n\r\n    return(\r\n        <div className=\"App-introtext-container\">\r\n            <span className=\"App-IntroText\" ref= {newRef}></span> \r\n         </div> \r\n        \r\n    )\r\n};\r\n\r\nexport default IntroText;","import \"./CardView.css\";\r\nimport image from \"../Assets/Capture_square.jpg\";\r\n\r\nimport IntroText from \"./IntroText\";\r\nimport './IntroText.css';\r\nfunction CardView(props) {\r\n\r\n  return (\r\n    <>\r\n    {(props.introMode) && <IntroText setIntro = {props.setIntroMode} />}\r\n    {(!props.introMode) && <div className={`card ${props.darkMode ? \"card-midnight\" : \"card-sunshine\"}`}>\r\n      <div className=\"card-content\">\r\n        <div className=\"card-intro\">\r\n          <div className=\"card-image-container\">\r\n          <img src={image} alt=\"\" className=\"card-img\" />\r\n          </div>\r\n          <div className=\"card-header\">\r\n            <h2 className=\"card-mainheader\">AROBIND MAHARANA</h2>\r\n            <h4 className=\"card-subheader\">Front-end Developer</h4>\r\n            <div className=\"card-contact\">\r\n            <i className=\"fab fa-linkedin\"></i>\r\n            <i className=\"fab fa-github-square\"></i>\r\n            <i className=\"fas fa-envelope-square\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-summary\">\r\n          <span >\r\n            Lorem ipsum dolor, sit amet consectetur adipisicing elit.\r\n            Lorem ipsum dolor, sit amet consectetur adipisicing elit.\r\n            Lorem ipsum dolor, sit amet consectetur adipisicing elit.\r\n             \r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CardView;\r\n","import './Navbar.css';\r\n\r\nfunction Navbar(props){\r\n\r\n    return(\r\n        <nav className=\"navbar\">\r\n        <ul>\r\n          {!props.introMode && <li><a href=\"/home\">Home</a> </li>}\r\n          {!props.introMode && <li><a href=\"/projects\">Projects</a> </li>}\r\n          <li onClick={props.modeHandler}>\r\n            {props.darkMode ? (\r\n              <span className=\"material-icons\">light_mode</span>\r\n            ) : (\r\n              <span className=\"material-icons \">dark_mode</span>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import \"./Projects.css\";\r\n\r\nfunction Projects() {\r\n\r\n    return(\r\n        <div className=\"App-projects-container\">\r\n            <h3>Work In Progress.</h3>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Projects","import { useState } from \"react\";\nimport \"./App.css\";\nimport CardView from \"./CardView\";\nimport Navbar from \"./Navbar\";\nimport Projects from \"./Projects\";\nimport { Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  const [introMode, setIntroMode] = useState(!sessionStorage.getItem('flag'));\n  \n  console.log(sessionStorage.getItem('flag'));\n  const modeHandler = () => {\n    setDarkMode((prev) => !prev);\n  };\n  \n  \n  return (\n    <div className={`App ${darkMode ? \"App-midnight\" : \"App-sunshine\"}`}>\n      <Navbar darkMode={darkMode} modeHandler={modeHandler} introMode = {introMode}/>\n      \n      <Switch>\n        <Route exact path=\"/projects\">\n          <Projects setIntroMode = {setIntroMode} />\n        </Route>\n        <Route path=\"*\">\n          <CardView darkMode={darkMode} introMode ={introMode} setIntroMode = {setIntroMode}/>\n        </Route> \n      </Switch>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}